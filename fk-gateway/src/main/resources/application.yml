server:
  port: 8083


eureka:
  client:
    service-url:
      defaultZone: http://127.0.0.1:8082/eureka #注册中心的地址

hystrix:
  command:
    default:
      execution.isolation.thread.timeoutInMilliseconds: 15000 # 熔断超时时长：1500ms=15s
#      circuitBreaker:
#        errorThresholdPercentage: 50 # 触发熔断错误比例阈值，默认值50%
#        sleepWindowInMilliseconds: 10000 # 熔断后休眠时长，默认值5秒
#        requestVolumeThreshold: 10 # 触发熔断的最小请求次数，默认20

ribbon:
  ConnectTimeout: 500 # ribbon链接超时时长
  ReadTimeout: 2000 # ribbon读取超时时长

spring:
  application:
    name: fk-gateway
  cloud:

    gateway:

      # =============跨域============
      globalcors: # 全局的跨域处理
        add-to-simple-url-handler-mapping: true # 是否将当前cors配置加入到SimpleUrlHandlerMapping中，解决options请求被拦截问题
        corsConfigurations:
          '[/**]':
            allowedOrigins: "*" # 允许哪些网站的跨域请求,下面的是例子
#              - "http://www.fisksoft.com"
            allowedMethods: # 允许的跨域ajax的请求方式
              - "GET"
              - "POST"
              - "DELETE"
              - "PUT"
              - "OPTIONS"
            allowedHeaders: "*" # 允许在请求中携带的头信息
            allowCredentials: true # 是否允许携带cookie
            maxAge: 360000 # 这次跨域检测的有效期

      # ============限流令牌桶=================
      default-filters: # 默认过滤项,作用于所有的路由规则
      - StripPrefix=1 # 去除路由前缀
      - name: Hystrix # 指定过滤工厂名称（可以是任意过滤工厂类型）
        args: # 指定过滤的参数
          name: fallbackcmd  # hystrix的指令名
          fallbackUri: forward:/hystrix/fallback # 失败后的跳转路径
      - name: RequestRateLimiter #请求数限流 名称固定,不能随便写
        args:
          key-resolver: "#{@ipKeyResolver}" # 指定一个key生成器,SPel表达式
          # 每一个IP地址，每秒钟最多发起2次请求
          # 每秒钟超过2次请求，则返回429的异常状态码
          redis-rate-limiter.replenishRate: 30  # 生成令牌的速率
          redis-rate-limiter.burstCapacity: 30 # 桶的容量

      # 添加网关路由
      routes:

      - id: auth-service # 授权服务
        uri: lb://auth-service # 路由的目标微服务地址,lb:代表负载均衡,auth-service:代表服务id
        predicates: # 断言  判断 前端浏览器发送url和当前path是否匹配
          - Path=/auth/** # 按照路径匹配的规则


      - id: user-service # 用户服务
        uri: lb://user-service
        predicates:
          - Path=/user/**

      - id: chartvisual-service # 可视化服务
        uri: lb://chartvisual-service
        predicates:
          - Path=/chartvisual/**

      - id: dataAccess-service # 数据接入服务
        uri: lb://dataAccess-service
        predicates:
          - Path=/dataAccess/**

      - id: datamodel-service # 数据建模服务
        uri: lb://datamodel-service
        predicates:
          - Path=/datamodel/**

  redis:
    host: 192.168.11.130


logging:
  level:
    com.fisk: debug
fk:
  auth:
    clientId: api-gateway
    secret: 1234