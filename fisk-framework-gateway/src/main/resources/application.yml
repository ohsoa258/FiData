server:
  port: 8083

eureka:
  client:
    healthcheck:
      enabled: true
    serviceUrl:
      # eureka服务端地址
      defaultZone: http://127.0.0.1:8082/eureka
    # 自己去服务端获取其他服务注册信息间隔时间，默认30秒
    registry-fetch-interval-seconds: 2
    # 客户端连接eureka服务端超时时间，默认为5秒
    eureka-server-connect-timeout-seconds: 5
    # 客户端读取eureka服务端超时时间
    eureka-server-read-timeout-seconds: 5
  instance:
    metadata-map:
      cluster: ${spring.application.name}
    instance-id: ${spring.cloud.client.ip-address}:${server.port}
    # status-page-url-path: ${server.servletPath}/info
    # 该服务实例安全健康检查地址
    # health-check-url-path: ${server.servletPath}/health
    # 不使用主机名来定义注册中心的地址，而使用IP地址的形式，如果设置了
    # eureka.instance.ip-address 属性，则使用该属性配置的IP，否则自动获取除环路IP外的第一个IP地址
    prefer-ip-address: true
    # 每隔n秒，发送一次心跳 （spring cloud 默认配置30s）
    lease-renewal-interval-in-seconds: 2
    # 告诉eureka服务端，n秒内未收到心跳，就将该服务剔除 （spring cloud 默认配置90s）
    lease-expiration-duration-in-seconds: 4

feign:
  client:
    config:
      default:
        loggerLevel: basic
  hystrix:
    enabled: true

ribbon:
  ConnectTimeout: 3000
  ReadTimeout: 15000
  NIWSServerListClassName: com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList
  ServerListRefreshInterval: 3000
  MaxAutoRetries: 0
  MaxAutoRetriesNextServer: 0

hystrix:
  command:
    default:
      execution:
        timeout:
          enabled: true
        isolation:
          # 线程隔离 THREAD， SEMAPHORE
          strategy: THREAD
          thread:
            # 超时时间
            timeoutInMilliseconds: 15500
            # 超时时是否应中断执行（默认true）
            interruptOnTimeout: true
      circuitBreaker:
        enabled: true
        # 在滚动窗口中启用熔断的最小请求数（默认20次）
        requestVolumeThreshold: 10
        # 熔断后，多少ms后进行一次请求尝试（默认5000ms）
        sleepWindowInMilliseconds: 5000
        # 当请求错误比例到达n%时，开启熔断（默认50%）
        errorThresholdPercentage: 50

spring:
  application:
    name: fk-gateway
  # 日志输入环境
  profiles:
    active: dev
  freemarker:
    check-template-location: false
  redis:
    host: 192.168.11.130
  cloud:
    gateway:
      # =============跨域============
      globalcors: # 全局的跨域处理
        add-to-simple-url-handler-mapping: true # 是否将当前cors配置加入到SimpleUrlHandlerMapping中，解决options请求被拦截问题
        corsConfigurations:
          '[/**]':
            allowedOrigins: "*" # 允许哪些网站的跨域请求,下面的是例子
            #              - "http://www.fisksoft.com"
            allowedMethods: # 允许的跨域ajax的请求方式
              - "GET"
              - "POST"
              - "DELETE"
              - "PUT"
              - "OPTIONS"
            allowedHeaders: "*" # 允许在请求中携带的头信息
            allowCredentials: true # 是否允许携带cookie
            maxAge: 360000 # 这次跨域检测的有效期

      # ============限流令牌桶=================
      default-filters: # 默认过滤项,作用于所有的路由规则
        - StripPrefix=1 # 去除路由前缀
        # ============Hystrix=================
        - name: Hystrix # 指定过滤工厂名称（可以是任意过滤工厂类型）
          args: # 指定过滤的参数
            name: fallbackcmd  # hystrix的指令名
            fallbackUri: forward:/hystrix/fallback # 失败后的跳转路径
        # ============限流令牌桶=================
        - name: RequestRateLimiter #请求数限流 名称固定,不能随便写
          args:
            key-resolver: "#{@ipKeyResolver}" # 指定一个key生成器,SPel表达式
            # 每一个IP地址，每秒钟最多发起2次请求
            # 每秒钟超过2次请求，则返回429的异常状态码
            redis-rate-limiter.replenishRate: 500 # 生成令牌的速率
            redis-rate-limiter.burstCapacity: 10 # 桶的容量

      # 添加网关路由
      routes:

        - id: auth-service # 授权服务
          uri: lb://auth-service # 路由的目标微服务地址,lb:代表负载均衡,auth-service:代表服务id
          predicates: # 断言  判断 前端浏览器发送url和当前path是否匹配
            - Path=/auth/** # 按照路径匹配的规则


        - id: user-service # 用户服务
          uri: lb://user-service
          predicates:
            - Path=/user/**

        - id: chartvisual-service # 可视化服务
          uri: lb://chartvisual-service
          predicates:
            - Path=/chartvisual/**

        - id: dataAccess-service # 数据接入服务
          uri: lb://dataAccess-service
          predicates:
            - Path=/dataAccess/**

        - id: task-center # 后台服务
          uri: lb://task-center
          predicates:
            - Path=/task/**

        - id: task-center-websocket # websocket
          uri: lb:ws://task-center
          predicates:
            - Path=/task/**

        - id: datamodel-service # 数据建模服务
          uri: lb://datamodel-service
          predicates:
            - Path=/datamodel/**

        - id: dataservice-service # 数据源接入服务
          uri: lb://dataservice-service
          predicates:
            - Path=/dataservice/**

        - id: data-factory # 数据工厂服务
          uri: lb://data-factory
          predicates:
            - Path=/taskschedule/**

        - id: datamanagement-service # 元数据服务
          uri: lb://datamanagement-service
          predicates:
            - Path=/datamanagement/**

        - id: datagovernance-service # 数据治理服务
          uri: lb://datagovernance-service
          predicates:
            - Path=/datagovernance/**

        - id: mdmmodel-service # mdm服务
          uri: lb://mdmmodel-service
          predicates:
            - Path=/mdmmodel/**

        - id: licenseRegistry-service # 许可证注册服务
          uri: lb://licenseRegistry-service
          predicates:
            - Path=/licenseRegistry/**
fk:
  jwt:
    key: helloWorldJavaLeyouAuthServiceSecretKey # 私钥
  auth:
    clientId: gateway-service
    secret: 1234
  encoder:
    crypt:
      secret: ${random.uuid}
      strength: 6